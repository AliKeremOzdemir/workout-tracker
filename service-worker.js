const CACHE='tracker-cache-v4';const ASSETS=['./','./index.html','./manifest.json','./service-worker.js','./icon-192.png','./icon-512.png','./offline.html'];self.addEventListener('install',e=>{e.waitUntil(caches.open(CACHE).then(c=>c.addAll(ASSETS)).then(()=>self.skipWaiting()))});self.addEventListener('activate',e=>{e.waitUntil(caches.keys().then(keys=>Promise.all(keys.filter(k=>k!==CACHE).map(k=>caches.delete(k)))).then(()=>self.clients.claim()))});self.addEventListener('message',e=>{e.data&&'SKIP_WAITING'===e.data.type&&self.skipWaiting()});self.addEventListener('fetch',e=>{const t=e.request,a=t.headers.get('accept')||'';if(a.includes('text/html'))e.respondWith(fetch(t).then(r=>{const s=r.clone();return caches.open(CACHE).then(c=>c.put(t,s)),r}).catch(()=>caches.match(t).then(r=>r||caches.match('./offline.html'))));else e.respondWith(caches.match(t).then(r=>{const s=fetch(t).then(r=>{const s=r.clone();return caches.open(CACHE).then(c=>c.put(t,s)),r});return r||s}).catch(()=>caches.match('./offline.html')))});